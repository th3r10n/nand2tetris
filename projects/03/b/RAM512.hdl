// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	// We'll use this multiplexor to set the load bit of the RAM64 chip.
	DMux8Way(sel[0]=address[0], sel[1]=address[1], sel[2]=address[2], in=load, a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);
	
	// This multiplexor will route the input to one of the 8RAM chips.	
	DMux8Way16(sel[0]=address[0], sel[1]=address[1], sel[2]=address[2], in[0]=in[0], a[0]=a0, b[0]=b0, c[0]=c0, d[0]=d0, e[0]=e0, f[0]=f0, g[0]=g0, h[0]=h0, in[1]=in[1], a[1]=a1, b[1]=b1, c[1]=c1, d[1]=d1, e[1]=e1, f[1]=f1, g[1]=g1, h[1]=h1, in[2]=in[2], a[2]=a2, b[2]=b2, c[2]=c2, d[2]=d2, e[2]=e2, f[2]=f2, g[2]=g2, h[2]=h2, in[3]=in[3], a[3]=a3, b[3]=b3, c[3]=c3, d[3]=d3, e[3]=e3, f[3]=f3, g[3]=g3, h[3]=h3, in[4]=in[4], a[4]=a4, b[4]=b4, c[4]=c4, d[4]=d4, e[4]=e4, f[4]=f4, g[4]=g4, h[4]=h4, in[5]=in[5], a[5]=a5, b[5]=b5, c[5]=c5, d[5]=d5, e[5]=e5, f[5]=f5, g[5]=g5, h[5]=h5, in[6]=in[6], a[6]=a6, b[6]=b6, c[6]=c6, d[6]=d6, e[6]=e6, f[6]=f6, g[6]=g6, h[6]=h6, in[7]=in[7], a[7]=a7, b[7]=b7, c[7]=c7, d[7]=d7, e[7]=e7, f[7]=f7, g[7]=g7, h[7]=h7, in[8]=in[8], a[8]=a8, b[8]=b8, c[8]=c8, d[8]=d8, e[8]=e8, f[8]=f8, g[8]=g8, h[8]=h8, in[9]=in[9], a[9]=a9, b[9]=b9, c[9]=c9, d[9]=d9, e[9]=e9, f[9]=f9, g[9]=g9, h[9]=h9, in[10]=in[10], a[10]=a10, b[10]=b10, c[10]=c10, d[10]=d10, e[10]=e10, f[10]=f10, g[10]=g10, h[10]=h10, in[11]=in[11], a[11]=a11, b[11]=b11, c[11]=c11, d[11]=d11, e[11]=e11, f[11]=f11, g[11]=g11, h[11]=h11, in[12]=in[12], a[12]=a12, b[12]=b12, c[12]=c12, d[12]=d12, e[12]=e12, f[12]=f12, g[12]=g12, h[12]=h12, in[13]=in[13], a[13]=a13, b[13]=b13, c[13]=c13, d[13]=d13, e[13]=e13, f[13]=f13, g[13]=g13, h[13]=h13, in[14]=in[14], a[14]=a14, b[14]=b14, c[14]=c14, d[14]=d14, e[14]=e14, f[14]=f14, g[14]=g14, h[14]=h14, in[15]=in[15], a[15]=a15, b[15]=b15, c[15]=c15, d[15]=d15, e[15]=e15, f[15]=f15, g[15]=g15, h[15]=h15);
	
	RAM64(load=loadA, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=a0, out[0]=A0, in[1]=a1, out[1]=A1, in[2]=a2, out[2]=A2, in[3]=a3, out[3]=A3, in[4]=a4, out[4]=A4, in[5]=a5, out[5]=A5, in[6]=a6, out[6]=A6, in[7]=a7, out[7]=A7, in[8]=a8, out[8]=A8, in[9]=a9, out[9]=A9, in[10]=a10, out[10]=A10, in[11]=a11, out[11]=A11, in[12]=a12, out[12]=A12, in[13]=a13, out[13]=A13, in[14]=a14, out[14]=A14, in[15]=a15, out[15]=A15);
	
	RAM64(load=loadB, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=b0, out[0]=B0, in[1]=b1, out[1]=B1, in[2]=b2, out[2]=B2, in[3]=b3, out[3]=B3, in[4]=b4, out[4]=B4, in[5]=b5, out[5]=B5, in[6]=b6, out[6]=B6, in[7]=b7, out[7]=B7, in[8]=b8, out[8]=B8, in[9]=b9, out[9]=B9, in[10]=b10, out[10]=B10, in[11]=b11, out[11]=B11, in[12]=b12, out[12]=B12, in[13]=b13, out[13]=B13, in[14]=b14, out[14]=B14, in[15]=b15, out[15]=B15);
	
	RAM64(load=loadC, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=c0, out[0]=C0, in[1]=c1, out[1]=C1, in[2]=c2, out[2]=C2, in[3]=c3, out[3]=C3, in[4]=c4, out[4]=C4, in[5]=c5, out[5]=C5, in[6]=c6, out[6]=C6, in[7]=c7, out[7]=C7, in[8]=c8, out[8]=C8, in[9]=c9, out[9]=C9, in[10]=c10, out[10]=C10, in[11]=c11, out[11]=C11, in[12]=c12, out[12]=C12, in[13]=c13, out[13]=C13, in[14]=c14, out[14]=C14, in[15]=c15, out[15]=C15);
	
	RAM64(load=loadD, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=d0, out[0]=D0, in[1]=d1, out[1]=D1, in[2]=d2, out[2]=D2, in[3]=d3, out[3]=D3, in[4]=d4, out[4]=D4, in[5]=d5, out[5]=D5, in[6]=d6, out[6]=D6, in[7]=d7, out[7]=D7, in[8]=d8, out[8]=D8, in[9]=d9, out[9]=D9, in[10]=d10, out[10]=D10, in[11]=d11, out[11]=D11, in[12]=d12, out[12]=D12, in[13]=d13, out[13]=D13, in[14]=d14, out[14]=D14, in[15]=d15, out[15]=D15);
	
	RAM64(load=loadE, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=e0, out[0]=E0, in[1]=e1, out[1]=E1, in[2]=e2, out[2]=E2, in[3]=e3, out[3]=E3, in[4]=e4, out[4]=E4, in[5]=e5, out[5]=E5, in[6]=e6, out[6]=E6, in[7]=e7, out[7]=E7, in[8]=e8, out[8]=E8, in[9]=e9, out[9]=E9, in[10]=e10, out[10]=E10, in[11]=e11, out[11]=E11, in[12]=e12, out[12]=E12, in[13]=e13, out[13]=E13, in[14]=e14, out[14]=E14, in[15]=e15, out[15]=E15);
	
	RAM64(load=loadF, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=f0, out[0]=F0, in[1]=f1, out[1]=F1, in[2]=f2, out[2]=F2, in[3]=f3, out[3]=F3, in[4]=f4, out[4]=F4, in[5]=f5, out[5]=F5, in[6]=f6, out[6]=F6, in[7]=f7, out[7]=F7, in[8]=f8, out[8]=F8, in[9]=f9, out[9]=F9, in[10]=f10, out[10]=F10, in[11]=f11, out[11]=F11, in[12]=f12, out[12]=F12, in[13]=f13, out[13]=F13, in[14]=f14, out[14]=F14, in[15]=f15, out[15]=F15);
	
	RAM64(load=loadG, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=g0, out[0]=G0, in[1]=g1, out[1]=G1, in[2]=g2, out[2]=G2, in[3]=g3, out[3]=G3, in[4]=g4, out[4]=G4, in[5]=g5, out[5]=G5, in[6]=g6, out[6]=G6, in[7]=g7, out[7]=G7, in[8]=g8, out[8]=G8, in[9]=g9, out[9]=G9, in[10]=g10, out[10]=G10, in[11]=g11, out[11]=G11, in[12]=g12, out[12]=G12, in[13]=g13, out[13]=G13, in[14]=g14, out[14]=G14, in[15]=g15, out[15]=G15);
	
	RAM64(load=loadH, address[0]=address[3], address[1]=address[4], address[2]=address[5], address[3]=address[6], address[4]=address[7], address[5]=address[8], in[0]=h0, out[0]=H0, in[1]=h1, out[1]=H1, in[2]=h2, out[2]=H2, in[3]=h3, out[3]=H3, in[4]=h4, out[4]=H4, in[5]=h5, out[5]=H5, in[6]=h6, out[6]=H6, in[7]=h7, out[7]=H7, in[8]=h8, out[8]=H8, in[9]=h9, out[9]=H9, in[10]=h10, out[10]=H10, in[11]=h11, out[11]=H11, in[12]=h12, out[12]=H12, in[13]=h13, out[13]=H13, in[14]=h14, out[14]=H14, in[15]=h15, out[15]=H15);
	
	Mux8Way16(sel[0]=address[0], sel[1]=address[1], sel[2]=address[2], a[0]=A0, b[0]=B0, c[0]=C0, d[0]=D0, e[0]=E0, f[0]=F0, g[0]=G0, h[0]=H0, out[0]=out[0], a[1]=A1, b[1]=B1, c[1]=C1, d[1]=D1, e[1]=E1, f[1]=F1, g[1]=G1, h[1]=H1, out[1]=out[1], a[2]=A2, b[2]=B2, c[2]=C2, d[2]=D2, e[2]=E2, f[2]=F2, g[2]=G2, h[2]=H2, out[2]=out[2], a[3]=A3, b[3]=B3, c[3]=C3, d[3]=D3, e[3]=E3, f[3]=F3, g[3]=G3, h[3]=H3, out[3]=out[3], a[4]=A4, b[4]=B4, c[4]=C4, d[4]=D4, e[4]=E4, f[4]=F4, g[4]=G4, h[4]=H4, out[4]=out[4], a[5]=A5, b[5]=B5, c[5]=C5, d[5]=D5, e[5]=E5, f[5]=F5, g[5]=G5, h[5]=H5, out[5]=out[5], a[6]=A6, b[6]=B6, c[6]=C6, d[6]=D6, e[6]=E6, f[6]=F6, g[6]=G6, h[6]=H6, out[6]=out[6], a[7]=A7, b[7]=B7, c[7]=C7, d[7]=D7, e[7]=E7, f[7]=F7, g[7]=G7, h[7]=H7, out[7]=out[7], a[8]=A8, b[8]=B8, c[8]=C8, d[8]=D8, e[8]=E8, f[8]=F8, g[8]=G8, h[8]=H8, out[8]=out[8], a[9]=A9, b[9]=B9, c[9]=C9, d[9]=D9, e[9]=E9, f[9]=F9, g[9]=G9, h[9]=H9, out[9]=out[9], a[10]=A10, b[10]=B10, c[10]=C10, d[10]=D10, e[10]=E10, f[10]=F10, g[10]=G10, h[10]=H10, out[10]=out[10], a[11]=A11, b[11]=B11, c[11]=C11, d[11]=D11, e[11]=E11, f[11]=F11, g[11]=G11, h[11]=H11, out[11]=out[11], a[12]=A12, b[12]=B12, c[12]=C12, d[12]=D12, e[12]=E12, f[12]=F12, g[12]=G12, h[12]=H12, out[12]=out[12], a[13]=A13, b[13]=B13, c[13]=C13, d[13]=D13, e[13]=E13, f[13]=F13, g[13]=G13, h[13]=H13, out[13]=out[13], a[14]=A14, b[14]=B14, c[14]=C14, d[14]=D14, e[14]=E14, f[14]=F14, g[14]=G14, h[14]=H14, out[14]=out[14], a[15]=A15, b[15]=B15, c[15]=C15, d[15]=D15, e[15]=E15, f[15]=F15, g[15]=G15, h[15]=H15, out[15]=out[15]);
}