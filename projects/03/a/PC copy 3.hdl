// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux16(sel=reset, in[0]=in[0], a[0]=a0, b[0]=b0, in[1]=in[1], a[1]=a1, b[1]=b1,in[2]=in[2], a[2]=a2, b[2]=b2,in[3]=in[3], a[3]=a3, b[3]=b3,in[4]=in[4], a[4]=a4, b[4]=b4,in[5]=in[5], a[5]=a5, b[5]=b5,in[6]=in[6], a[6]=a6, b[6]=b6,in[7]=in[7], a[7]=a7, b[7]=b7,in[8]=in[8], a[8]=a8, b[8]=b8,in[9]=in[9], a[9]=a9, b[9]=b9,in[10]=in[10], a[10]=a10, b[10]=b10,in[11]=in[11], a[11]=a11, b[11]=b11,in[12]=in[12], a[12]=a12, b[12]=b12,in[13]=in[13], a[13]=a13, b[13]=b13,in[14]=in[14], a[14]=a14, b[14]=b14,in[15]=in[15], a[15]=a15, b[15]=b15);
	
	Zero16(sel=reset, in[0]=b0, out[0]=z0,in[1]=b1, out[1]=z1,in[2]=b2, out[2]=z2,in[3]=b3, out[3]=z3,in[4]=b4, out[4]=z4,in[5]=b5, out[5]=z5,in[6]=b6, out[6]=z6,in[7]=b7, out[7]=z7,in[8]=b8, out[8]=z8,in[9]=b9, out[9]=z9,in[10]=b10, out[10]=z10,in[11]=b11, out[11]=z11,in[12]=b12, out[12]=z12,in[13]=b13, out[13]=z13,in[14]=b14, out[14]=z14,in[15]=b15, out[15]=z15);
	
	Mux16(sel=reset, a[0]=a0, b[0]=z0, out[0]=m0, a[1]=a1, b[1]=z1, out[1]=m1, a[2]=a2, b[2]=z2, out[2]=m2, a[3]=a3, b[3]=z3, out[3]=m3, a[4]=a4, b[4]=z4, out[4]=m4, a[5]=a5, b[5]=z5, out[5]=m5, a[6]=a6, b[6]=z6, out[6]=m6, a[7]=a7, b[7]=z7, out[7]=m7, a[8]=a8, b[8]=z8, out[8]=m8, a[9]=a9, b[9]=z9, out[9]=m9, a[10]=a10, b[10]=z10, out[10]=m10, a[11]=a11, b[11]=z11, out[11]=m11, a[12]=a12, b[12]=z12, out[12]=m12, a[13]=a13, b[13]=z13, out[13]=m13, a[14]=a14, b[14]=z14, out[14]=m14, a[15]=a15, b[15]=z15, out[15]=m15);
	
	Or(a=reset, b=load, out=w1);
	Or(a=w1, b=inc, out=w2);
	Not(in=w1, out=w3);
	And(a=w3, b=inc, out=w4);
	
	Mux16(sel=w2, a[0]=m0, b[0]=s0, out[0]=n0, a[1]=m1, b[0]=s1, out[1]=n1, a[2]=m2, b[0]=s2, out[2]=n2, a[3]=m3, b[0]=s3, out[3]=n3, a[4]=m4, b[0]=s4, out[4]=n4, a[5]=m5, b[0]=s5, out[5]=n5, a[6]=m6, b[0]=s6, out[6]=n6, a[7]=m7, b[0]=s7, out[7]=n7, a[8]=m8, b[0]=s8, out[8]=n8, a[9]=m9, b[0]=s9, out[9]=n9, a[10]=m10, b[0]=s10, out[10]=n10, a[11]=m11, b[0]=s11, out[11]=n11, a[12]=m12, b[0]=s12, out[12]=n12, a[13]=m13, b[0]=s13, out[13]=n13, a[14]=m14, b[0]=s14, out[14]=n14, a[15]=m15, b[0]=s15, out[15]=n15);
	
	Register(load=w2, in[0]=n0, out[0]=r0, in[1]=n1, out[1]=r1, in[2]=n2, out[2]=r2, in[3]=n3, out[3]=r3, in[4]=n4, out[4]=r4, in[5]=n5, out[5]=r5, in[6]=n6, out[6]=r6, in[7]=n7, out[7]=r7, in[8]=n8, out[8]=r8, in[9]=n9, out[9]=r9, in[10]=n10, out[10]=r10, in[11]=n11, out[11]=r11, in[12]=n12, out[12]=r12, in[13]=n13, out[13]=r13, in[14]=n14, out[14]=r14, in[15]=n15, out[15]=r15);
	
	DMux16(sel=w4, in[0]=r0, a[0]=p0, b[0]=q0, in[1]=r1, a[1]=p1, b[1]=q1, in[2]=r2, a[2]=p2, b[2]=q2, in[3]=r3, a[3]=p3, b[3]=q3, in[4]=r4, a[4]=p4, b[4]=q4, in[5]=r5, a[5]=p5, b[5]=q5, in[6]=r6, a[6]=p6, b[6]=q6, in[7]=r7, a[7]=p7, b[7]=q7, in[8]=r8, a[8]=p8, b[8]=q8, in[9]=r9, a[9]=p9, b[9]=q9, in[10]=r10, a[10]=p10, b[10]=q10, in[11]=r11, a[11]=p11, b[11]=q11, in[12]=r12, a[12]=p12, b[12]=q12, in[13]=r13, a[13]=p13, b[13]=q13, in[14]=r14, a[14]=p14, b[14]=q14, in[15]=r15, a[15]=p15, b[15]=q15);
	
	Add16(a[0]=q0, b[0]=true, out[0]=s0, a[1]=q1, b[1]=false, out[1]=s1, a[2]=q2, b[2]=false, out[2]=s2, a[3]=q3, b[3]=false, out[3]=s3, a[4]=q4, b[4]=false, out[4]=s4, a[5]=q5, b[5]=false, out[5]=s5, a[6]=q6, b[6]=false, out[6]=s6, a[7]=q7, b[7]=false, out[7]=s7, a[8]=q8, b[8]=false, out[8]=s8, a[9]=q9, b[9]=false, out[9]=s9, a[10]=q10, b[10]=false, out[10]=s10, a[11]=q11, b[11]=false, out[11]=s11, a[12]=q12, b[12]=false, out[12]=s12, a[13]=q13, b[13]=false, out[13]=s13, a[14]=q14, b[14]=false, out[14]=s14, a[15]=q15, b[15]=false, out[15]=s15);
	
	Mux16(sel=w4, a[0]=p0, b[0]=s0, out[0]=out[0], a[1]=p1, b[1]=s1, out[1]=out[1], a[2]=p2, b[2]=s2, out[2]=out[2], a[3]=p3, b[3]=s3, out[3]=out[3], a[4]=p4, b[4]=s4, out[4]=out[4], a[5]=p5, b[5]=s5, out[5]=out[5], a[6]=p6, b[6]=s6, out[6]=out[6], a[7]=p7, b[7]=s7, out[7]=out[7], a[8]=p8, b[8]=s8, out[8]=out[8], a[9]=p9, b[9]=s9, out[9]=out[9], a[10]=p10, b[10]=s10, out[10]=out[10], a[11]=p11, b[11]=s11, out[11]=out[11], a[12]=p12, b[12]=s12, out[12]=out[12], a[13]=p13, b[13]=s13, out[13]=out[13], a[14]=p14, b[14]=s14, out[14]=out[14], a[15]=p15, b[15]=s15, out[15]=out[15]);
	
}
