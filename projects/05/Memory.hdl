// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux(sel=address[14], in=load, a=loada, b=loadb);

    DMux16(sel=address[14], in[0]=in[0], a[0]=a0, b[0]=b0, in[1]=in[1], a[1]=a1, b[1]=b1, in[2]=in[2], a[2]=a2, b[2]=b2, in[3]=in[3], a[3]=a3, b[3]=b3, in[4]=in[4], a[4]=a4, b[4]=b4, in[5]=in[5], a[5]=a5, b[5]=b5, in[6]=in[6], a[6]=a6, b[6]=b6, in[7]=in[7], a[7]=a7, b[7]=b7, in[8]=in[8], a[8]=a8, b[8]=b8, in[9]=in[9], a[9]=a9, b[9]=b9, in[10]=in[10], a[10]=a10, b[10]=b10, in[11]=in[11], a[11]=a11, b[11]=b11, in[12]=in[12], a[12]=a12, b[12]=b12, in[13]=in[13], a[13]=a13, b[13]=b13, in[14]=in[14], a[14]=a14, b[14]=b14, in[15]=in[15], a[15]=a15, b[15]=b15);

    RAM16K(load=loada, address[0]=address[0], address[1]=address[1], address[2]=address[2], address[3]=address[3], address[4]=address[4], address[5]=address[5], address[6]=address[6], address[7]=address[7], address[8]=address[8], address[9]=address[9], address[10]=address[10], address[11]=address[11], address[12]=address[12], address[13]=address[13], in[0]=a0, in[1]=a1, in[2]=a2, in[3]=a3, in[4]=a4, in[5]=a5, in[6]=a6, in[7]=a7, in[8]=a8, in[9]=a9, in[10]=a10, in[11]=a11, in[12]=a12, in[13]=a13, in[14]=a14, in[15]=a15, out[0]=r0, out[1]=r1, out[2]=r2, out[3]=r3, out[4]=r4, out[5]=r5, out[6]=r6, out[7]=r7, out[8]=r8, out[9]=r9, out[10]=r10, out[11]=r11, out[12]=r12, out[13]=r13, out[14]=r14, out[15]=r15);
   
    Screen(load=loadb, address[0]=address[0], address[1]=address[1], address[2]=address[2], address[3]=address[3], address[4]=address[4], address[5]=address[5], address[6]=address[6], address[7]=address[7], address[8]=address[8], address[9]=address[9], address[10]=address[10], address[11]=address[11], address[12]=address[12], in[0]=b0, in[1]=b1, in[2]=b2, in[3]=b3, in[4]=b4, in[5]=b5, in[6]=b6, in[7]=b7, in[8]=b8, in[9]=b9, in[10]=b10, in[11]=b11, in[12]=b12, in[13]=b13, in[14]=b14, in[15]=b15, out[0]=s0, out[1]=s1, out[2]=s2, out[3]=s3, out[4]=s4, out[5]=s5, out[6]=s6, out[7]=s7, out[8]=s8, out[9]=s9, out[10]=s10, out[11]=s11, out[12]=s12, out[13]=s13, out[14]=s14, out[15]=s15);
    
    Mux16(sel=address[14], a[0]=r0, b[0]=s0, out[0]=m0, a[1]=r1, b[1]=s1, out[1]=m1, a[2]=r2, b[2]=s2, out[2]=m2, a[3]=r3, b[3]=s3, out[3]=m3, a[4]=r4, b[4]=s4, out[4]=m4, a[5]=r5, b[5]=s5, out[5]=m5, a[6]=r6, b[6]=s6, out[6]=m6, a[7]=r7, b[7]=s7, out[7]=m7, a[8]=r8, b[8]=s8, out[8]=m8, a[9]=r9, b[9]=s9, out[9]=m9, a[10]=r10, b[10]=s10, out[10]=m10, a[11]=r11, b[11]=s11, out[11]=m11, a[12]=r12, b[12]=s12, out[12]=m12, a[13]=r13, b[13]=s13, out[13]=m13, a[14]=r14, b[14]=s14, out[14]=m14, a[15]=r15, b[15]=s15, out[15]=m15);
    
    Keyboard(out[0]=k0, out[1]=k1, out[2]=k2, out[3]=k3, out[4]=k4, out[5]=k5, out[6]=k6, out[7]=k7, out[8]=k8, out[9]=k9, out[10]=k10, out[11]=k11, out[12]=k12, out[13]=k13, out[14]=k14, out[15]=k15);

    And(a=address[13], b=address[14], out=and);

    Mux16(sel=and, a[0]=m0, b[0]=k0, out[0]=out[0], a[1]=m1, b[1]=k1, out[1]=out[1], a[2]=m2, b[2]=k2, out[2]=out[2], a[3]=m3, b[3]=k3, out[3]=out[3], a[4]=m4, b[4]=k4, out[4]=out[4], a[5]=m5, b[5]=k5, out[5]=out[5], a[6]=m6, b[6]=k6, out[6]=out[6], a[7]=m7, b[7]=k7, out[7]=out[7], a[8]=m8, b[8]=k8, out[8]=out[8], a[9]=m9, b[9]=k9, out[9]=out[9], a[10]=m10, b[10]=k10, out[10]=out[10], a[11]=m11, b[11]=k11, out[11]=out[11], a[12]=m12, b[12]=k12, out[12]=out[12], a[13]=m13, b[13]=k13, out[13]=out[13], a[14]=m14, b[14]=k14, out[14]=out[14], a[15]=m15, b[15]=k15, out[15]=out[15]);

}